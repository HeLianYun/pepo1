<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置不拦截  放行的页面-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <!--设置不拦截的静态资源-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!--配置需要拦截的页面-->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <!--配置登录页面-->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"/>
        <!--配置跨越攻击-->
        <security:csrf disabled="true"/>
        <!--配置退出页面
        invalidate-session  清除security提供的session中的用户
        logout-success-url  突出后页面跳转的路径
        logout-url          退出功能的请求路径
        -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp"/>

        <!--配置没有权限提示页面-->
        <security:access-denied-handler error-page="/403.jsp"/>

    </security:http>


    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--设置一个假的账户    (用于security的入门案例)
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="security" authorities="ROLE_USER" password="{noop}1234"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->
    <!--通过从数据库查询数据  密码和账户-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="sysUserService">
            <!--通知框架加密的方式-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--    &lt;!&ndash;开启jsr-250相关的注解  java提供的权限方法&ndash;&gt;
        <security:global-method-security jsr250-annotations="enabled"/>-->
    <!--security框架提供的设置权限的方法-->
    <!--   <security:global-method-security secured-annotations="enabled"/>-->
    <!--spring 框架提供的设置权限的方法-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>